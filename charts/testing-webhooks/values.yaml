# Default values for testing-webhooks.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# for environment with HA requirement, set this to plural replicas, like 3.
replicaCount: 1

image:
  repository: lqshow/testing-webhooks-controller
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "testing-webhooks-controller-manager"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

admissionWebhooks:
  enabled: true
  failurePolicy: Fail
  certificate:
    mountPath: /etc/k8s-webhook-certs
  patch:
    enabled: false
  # If set, use the existing certificate
  existingSecret: ""
  # Or use cert-manager to management certificates
  certManager:
    enabled: true
    revisionHistoryLimit: 3

## @param webhookService.type testing-webhooks webhook service type
## @param webhookService.port testing-webhooks webhook service port
webhookService:
  type: ClusterIP
  port: 9443

## @param healthCheck.port testing-webhooks health check port
healthCheck:
  port: 8081

# Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true

nodeSelector: {}

tolerations: []

affinity: {}
